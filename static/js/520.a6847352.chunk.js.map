{"version":3,"file":"static/js/520.a6847352.chunk.js","mappings":"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","sources":["helpers/notifiOptions.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/UpdateForm/UpdateForm.styled.js","components/UpdateForm/UpdateForm.jsx","components/ContactList/ContactList.styled.js","components/ConfirmModal/ConfirmModal.styled.js","components/ConfirmModal/ConfirmModal.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx","schemas/loginSchema.js","schemas/registerSchema.js","schemas/contactSchema.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({\n  position: 'center-top',\n});\n\nexport default Notify;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selecError = state => state.contacts.error;\nexport const selecFilter = state => state.filter;\n\nexport const selectFilteredContact = createSelector(\n  [selectContacts, selecFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    if (filter === '') return contacts;\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { TextField, Box, Container, Button } from '@mui/material';\nimport Notify from 'helpers/notifiOptions';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { contactSchema } from 'schemas';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n\n    validationSchema: contactSchema,\n\n    onSubmit: values => {\n      const isContactExist = contacts.find(\n        contact =>\n          contact.name.toLowerCase() === values.name.trim().toLowerCase()\n      );\n      if (isContactExist) {\n        Notify.failure(`\"${values.name}\" is already in contacts`);\n      } else {\n        dispatch(addContact(values));\n        formik.resetForm();\n        Notify.success(`Contact \"${values.name}\" successfully created`);\n      }\n    },\n  });\n\n  return (\n    <Container component=\"div\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 4,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Box component=\"form\" sx={{ mt: 1 }} onSubmit={formik.handleSubmit}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"name\"\n            label=\"Name *\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"number\"\n            label=\"Number *\"\n            name=\"number\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Add contact\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { InputAdornment, Input } from '@mui/material';\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\nimport { Label } from 'components/Filter/Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <Input\n        id=\"input-with-icon-adornment\"\n        placeholder=\"Find contact\"\n        onChange={event => dispatch(changeFilter(event.target.value))}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <PersonSearchIcon aria-label=\"search\" />\n          </InputAdornment>\n        }\n      />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContainerLoader = styled.div`\n  position: absolute;\n  // top: 470px;\n  // left: 500px;\n  top: 10px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  justify-content: center;\n\n  // margin-left: auto;\n  // margin-right: auto;\n`;\n","import { useSelector } from 'react-redux';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { selectIsLoading } from 'redux/selectors';\nimport { ContainerLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ContainerLoader>\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"40\"\n          visible={true}\n        />\n      )}\n    </ContainerLoader>\n  );\n};\n","import styled from 'styled-components';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nexport const Backdrop = styled.div`\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #d8d4d4a1;\n`;\n\nexport const Form = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -100%);\n  background-color: #ffffff;\n  gap: 10px;\n  width: calc(100% - 40px);\n  height: 200px;\n  border: 1px solid #c8c6c6;\n  border-radius: 5px;\n  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\n  padding: 10px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 380px) {\n    height: 100px;\n    display: flex;\n    align-items: center;\n  }\n\n  @media screen and (min-width: 480px) {\n    width: 420px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 560px;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  margin-top: 10px;\n\n  @media screen and (min-width: 380px) {\n    flex-direction: column;\n    gap: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  width: 20px;\n  height: 20px;\n`;\n\nexport const ConfirmBtn = styled(CheckCircleIcon)`\n  fill: green !important;\n  cursor: pointer;\n\n  &:hover {\n    scale: 1.1;\n    transition: 250ms;\n  }\n`;\n\nexport const CancelBtn = styled(CancelIcon)`\n  fill: red !important;\n  cursor: pointer;\n\n  &:hover {\n    scale: 1.1;\n    transition: 250ms;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport TextField from '@mui/material/TextField';\nimport Notify from 'helpers/notifiOptions';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { contactSchema } from 'schemas';\nimport {\n  Backdrop,\n  Form,\n  ButtonContainer,\n  Button,\n  ConfirmBtn,\n  CancelBtn,\n} from 'components/UpdateForm/UpdateForm.styled';\n\nexport const UpdateForm = ({ setIsUpdate, contact }) => {\n  const dispatch = useDispatch();\n\n  const closeForm = () => {\n    setIsUpdate(false);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: contact.name,\n      number: contact.number,\n    },\n\n    validationSchema: contactSchema,\n\n    onSubmit: values => {\n      dispatch(\n        updateContact({\n          id: contact.id,\n          ...values,\n        })\n      );\n      closeForm();\n      Notify.success(`Contact \"${values.name}\" updated successfully`);\n    },\n  });\n\n  return (\n    <Backdrop>\n      <Form onSubmit={formik.handleSubmit}>\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          autoFocus\n          id=\"name\"\n          label=\"Name *\"\n          name=\"name\"\n          defaultValue={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          id=\"number\"\n          label=\"Number *\"\n          name=\"number\"\n          defaultValue={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <ButtonContainer>\n          <Button type=\"submit\">\n            <ConfirmBtn aria-label=\"confirm\" />\n          </Button>\n          <CancelBtn aria-label=\"cancel\" onClick={closeForm} />\n        </ButtonContainer>\n      </Form>\n    </Backdrop>\n  );\n};\n\nUpdateForm.propTypes = {\n  setIsUpdate: PropTypes.func.isRequired,\n  contact: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\nexport const ContainerList = styled.div`\n  position: relative;\n  box-sizing: border-box;\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  padding: 60px 0 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 480px) {\n    width: 440px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 600px;\n  }\n`;\n\nexport const List = styled.ul`\n  padding-left: 10px;\n  overflow-y: scroll;\n  min-height: 222px;\n  height: calc(100vh - 523px);\n\n  ::-webkit-scrollbar-track {\n    background-color: transparent;\n    border-radius: 2px;\n  }\n\n  ::-webkit-scrollbar {\n    width: 6px;\n    background-color: transparent;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background-color: #1976d2;\n    border-radius: 5px;\n\n    &:hover {\n      background-color: #1565c0;\n    }\n  }\n`;\n\nexport const ContactItem = styled.li`\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: calc(100% - 30px);\n  height: 40px;\n  border-radius: 4px;\n  background-color: #1976d2;\n  color: #ffffff;\n  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\n  padding: 0 10px;\n  margin-bottom: 5px;\n\n  &:hover {\n    scale: 1.03;\n    transition: 250ms;\n  }\n`;\n\nexport const NameWrap = styled.div`\n  display: flex;\n  align-items: center;\n  width: 150px;\n`;\n\nexport const BtnWrap = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Avatar = styled(AccountCircleIcon)`\n  margin-right: 5px;\n\n  @media screen and (min-width: 480px) {\n    margin-right: 10px;\n  }\n`;\n\nexport const UpdateBtn = styled(EditIcon)`\n  cursor: pointer;\n  margin-right: 5px;\n\n  &:hover {\n    color: #30f52a;\n    scale: 1.1;\n  }\n\n  @media screen and (min-width: 480px) {\n    margin-right: 10px;\n  }\n`;\n\nexport const DeleteBtn = styled(DeleteForeverIcon)`\n  cursor: pointer;\n\n  &:hover {\n    color: #eb4b5b;\n    scale: 1.1;\n  }\n`;\n","import styled from 'styled-components';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nexport const Backdrop = styled.div`\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #d8d4d4a1;\n`;\n\nexport const Form = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -100%);\n  background-color: #ffffff;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: calc(100% - 40px);\n  height: 100px;\n  border: 1px solid #c8c6c6;\n  border-radius: 5px;\n  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\n  padding: 10px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 480px) {\n    width: 420px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 560px;\n  }\n`;\n\nexport const WarningIcon = styled(ErrorIcon)`\n  width: 30px !important;\n  height: 30px !important;\n  fill: red !important;\n\n  @media screen and (min-width: 480px) {\n    width: 40px !important;\n    height: 40px !important;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 50px !important;\n    height: 50px !important;\n  }\n`;\n\nexport const WarningText = styled.p`\n  text-align: center;\n  margin-left: 10px;\n  margin-right: 10px;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  width: 20px;\n  height: 20px;\n`;\n\nexport const ConfirmBtn = styled(CheckCircleIcon)`\n  fill: green !important;\n  cursor: pointer;\n\n  &:hover {\n    scale: 1.1;\n    transition: 250ms;\n  }\n`;\n\nexport const CancelBtn = styled(CancelIcon)`\n  fill: red !important;\n  cursor: pointer;\n\n  &:hover {\n    scale: 1.1;\n    transition: 250ms;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Notify from 'helpers/notifiOptions';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport {\n  Backdrop,\n  Form,\n  ButtonContainer,\n  Button,\n  ConfirmBtn,\n  CancelBtn,\n  WarningIcon,\n  WarningText,\n} from 'components/ConfirmModal/ConfirmModal.styled';\n\nexport const ConfirmModal = ({ setIsDelete, contact }) => {\n  const dispatch = useDispatch();\n\n  const closeForm = () => {\n    setIsDelete(false);\n  };\n\n  const onSubmitForm = event => {\n    event.preventDefault();\n    dispatch(deleteContact(contact.id));\n    closeForm();\n    Notify.success(`Contact \"${contact.name}\" deleted successfully`);\n  };\n\n  return (\n    <Backdrop>\n      <Form onSubmit={onSubmitForm}>\n        <WarningIcon aria-label=\"warning\" />\n        <WarningText>\n          Are you sure you want to delete the contact \"{contact.name}\"?\n        </WarningText>\n        <ButtonContainer>\n          <Button type=\"submit\">\n            <ConfirmBtn aria-label=\"confirm\" />\n          </Button>\n          <CancelBtn aria-label=\"cancel\" onClick={closeForm} />\n        </ButtonContainer>\n      </Form>\n    </Backdrop>\n  );\n};\n\nConfirmModal.propTypes = {\n  setIsDelete: PropTypes.func.isRequired,\n  contact: PropTypes.object.isRequired,\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Loader } from 'components/Loader/Loader';\nimport { selectFilteredContact } from 'redux/selectors';\nimport { UpdateForm } from 'components/UpdateForm/UpdateForm';\nimport {\n  List,\n  ContactItem,\n  ContainerList,\n  NameWrap,\n  BtnWrap,\n  DeleteBtn,\n  UpdateBtn,\n  Avatar,\n} from 'components/ContactList/ContactList.styled';\nimport { ConfirmModal } from 'components/ConfirmModal/ConfirmModal';\n\nexport const ContactList = () => {\n  const [isUpdate, setIsUpdate] = useState(false);\n  const [contact, setContact] = useState({});\n\n  const [isDelete, setIsDelete] = useState(false);\n\n  const filteredContact = useSelector(selectFilteredContact);\n\n  const changeContact = oldContact => {\n    setIsUpdate(true);\n    setContact(oldContact);\n  };\n\n  const removeContact = contact => {\n    setIsDelete(true);\n    setContact(contact);\n  };\n\n  return (\n    <>\n      {isUpdate && <UpdateForm setIsUpdate={setIsUpdate} contact={contact} />}\n      {isDelete && <ConfirmModal setIsDelete={setIsDelete} contact={contact} />}\n      <ContainerList>\n        <Loader />\n        <List>\n          {[...filteredContact]\n            .sort((previousName, nextName) =>\n              previousName.name.localeCompare(nextName.name)\n            )\n            .map(({ id, name, number }) => (\n              <ContactItem key={id}>\n                <NameWrap>\n                  <Avatar aria-label=\"avatar\" />\n                  <p>{name}</p>\n                </NameWrap>\n                <p>{number}</p>\n                <BtnWrap>\n                  <UpdateBtn\n                    aria-label=\"edit\"\n                    onClick={() => changeContact({ id, name, number })}\n                  />\n                  <DeleteBtn\n                    aria-label=\"delete\"\n                    onClick={() => removeContact({ id, name, number })}\n                  />\n                </BtnWrap>\n              </ContactItem>\n            ))}\n        </List>\n      </ContainerList>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContainerContacts = styled.div`\n  font-size: 20px;\n  display: flex;\n  flex-direction: column;\n  min-width: 340px;\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selecError } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectIsAuth } from 'redux/auth/authSelectors';\nimport { ContainerContacts } from 'pages/Contacts/Contacts.styled';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selecError);\n  const isAuth = useSelector(selectIsAuth);\n\n  useEffect(() => {\n    if (isAuth) dispatch(fetchContacts());\n  }, [dispatch, isAuth]);\n\n  if (error) return <p>Download error</p>;\n\n  return (\n    <ContainerContacts>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </ContainerContacts>\n  );\n};\n","import * as yup from 'yup';\n\nexport const loginSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().min(6).required(),\n});\n","import * as yup from 'yup';\n\nexport const registerSchema = yup.object({\n  name: yup.string().min(3).max(15).required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(6).required(),\n});\n","import * as yup from 'yup';\n\nexport const contactSchema = yup.object({\n  name: yup.string().min(3).max(15).required(),\n  number: yup\n    .string()\n    .matches(/[0-9]/, 'number must contain only numbers')\n    .max(13)\n    .required(),\n});\n"],"names":["Notify","position","selectContacts","state","contacts","items","selectIsLoading","isLoading","selecError","error","selectFilteredContact","createSelector","filter","normalizedFilter","toLowerCase","name","includes","ContactForm","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","number","validationSchema","contactSchema","onSubmit","values","find","contact","trim","addContact","resetForm","Container","component","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","mt","handleSubmit","TextField","margin","fullWidth","id","label","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","type","variant","mb","Label","styled","Filter","Input","placeholder","event","changeFilter","target","startAdornment","InputAdornment","PersonSearch","ContainerLoader","Loader","strokeColor","strokeWidth","animationDuration","width","visible","Backdrop","Form","ButtonContainer","ConfirmBtn","CheckCircleIcon","CancelBtn","CancelIcon","UpdateForm","setIsUpdate","closeForm","updateContact","autoFocus","defaultValue","onClick","ContainerList","List","ContactItem","NameWrap","BtnWrap","Avatar","AccountCircleIcon","UpdateBtn","EditIcon","DeleteBtn","DeleteForeverIcon","WarningIcon","ErrorIcon","WarningText","ConfirmModal","setIsDelete","preventDefault","deleteContact","ContactList","useState","isUpdate","setContact","isDelete","filteredContact","sort","previousName","nextName","localeCompare","map","oldContact","removeContact","ContainerContacts","Contacts","isAuth","selectIsAuth","useEffect","fetchContacts","loginSchema","yup","email","required","password","min","registerSchema","max","matches"],"sourceRoot":""}