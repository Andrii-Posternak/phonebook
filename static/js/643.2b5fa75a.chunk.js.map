{"version":3,"file":"static/js/643.2b5fa75a.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.jsx","pages/Register/Register.jsx","schemas/loginSchema.js","schemas/registerSchema.js","schemas/contactSchema.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\n\nimport {\n  Avatar,\n  Button,\n  TextField,\n  Link,\n  Grid,\n  Box,\n  Typography,\n  Container,\n} from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { registerSchema, loginSchema } from 'schemas';\n\nexport const AuthForm = ({ authType, btnTitle, onSubmit }) => {\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n\n    validationSchema: authType === 'login' ? loginSchema : registerSchema,\n\n    onSubmit: values => {\n      onSubmit(values);\n    },\n  });\n\n  return (\n    <Container component=\"div\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: '#1976d2' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          {btnTitle}\n        </Typography>\n        <Box component=\"form\" sx={{ mt: 1 }} onSubmit={formik.handleSubmit}>\n          {authType === 'register' && (\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              type=\"text\"\n              id=\"name\"\n              label=\"Name *\"\n              name=\"name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n          )}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            type=\"email\"\n            id=\"email\"\n            label=\"Email *\"\n            name=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            helperText={formik.touched.email && formik.errors.email}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            type=\"password\"\n            id=\"password\"\n            label=\"Password *\"\n            name=\"password\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            helperText={formik.touched.password && formik.errors.password}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            {btnTitle}\n          </Button>\n          <Grid container>\n            <Grid item xs></Grid>\n            <Grid item>\n              {btnTitle === 'Login' ? (\n                <Link href=\"/phonebook/register\" variant=\"body2\">\n                  Don't have an account? Register\n                </Link>\n              ) : (\n                <Link href=\"/phonebook/login\" variant=\"body2\">\n                  Already have an account? Login\n                </Link>\n              )}\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nAuthForm.propTypes = {\n  authType: PropTypes.string.isRequired,\n  btnTitle: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { AuthForm } from 'components/AuthForm/AuthForm';\nimport { registerUser } from 'redux/auth/authOperations';\n\nexport const Register = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmt = form => {\n    dispatch(registerUser(form));\n  };\n\n  return (\n    <AuthForm\n      authType={'register'}\n      btnTitle={'Register'}\n      onSubmit={handleSubmt}\n    />\n  );\n};\n","import * as yup from 'yup';\n\nexport const loginSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().min(6).required(),\n});\n","import * as yup from 'yup';\n\nexport const registerSchema = yup.object({\n  name: yup.string().min(3).max(15).required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(6).required(),\n});\n","import * as yup from 'yup';\n\nexport const contactSchema = yup.object({\n  name: yup.string().min(3).max(15).required(),\n  number: yup\n    .string()\n    .matches(/^([+]?[0-9])*$/, 'number must contain only numbers')\n    .max(13)\n    .required(),\n});\n"],"names":["AuthForm","authType","btnTitle","onSubmit","formik","useFormik","initialValues","name","email","password","validationSchema","loginSchema","registerSchema","values","component","maxWidth","sx","marginTop","display","flexDirection","alignItems","m","bgcolor","variant","mt","handleSubmit","margin","fullWidth","type","id","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","mb","container","item","xs","href","Register","dispatch","useDispatch","form","registerUser","yup","required","min","max","contactSchema","number","matches"],"sourceRoot":""}